from PIL import Image
import numpy as np

def encrypt_image(image_path, key, output_path):
    """
    Encrypts an image by modifying its pixel values using a key.

    :param image_path: Path to the input image
    :param key: Integer key for encryption
    :param output_path: Path to save the encrypted image
    """
    image = Image.open(image_path)
    pixels = np.array(image)

    # Encrypt the pixels by applying a mathematical operation
    encrypted_pixels = (pixels + key) % 256

    # Save the encrypted image
    encrypted_image = Image.fromarray(np.uint8(encrypted_pixels))
    encrypted_image.save(output_path)
    print(f"Image encrypted and saved to {output_path}")

def decrypt_image(image_path, key, output_path):
    """
    Decrypts an image by reversing the encryption process.

    :param image_path: Path to the encrypted image
    :param key: Integer key used for encryption
    :param output_path: Path to save the decrypted image
    """
    image = Image.open(image_path)
    pixels = np.array(image)

    # Decrypt the pixels by reversing the mathematical operation
    decrypted_pixels = (pixels - key) % 256

    # Save the decrypted image
    decrypted_image = Image.fromarray(np.uint8(decrypted_pixels))
    decrypted_image.save(output_path)
    print(f"Image decrypted and saved to {output_path}")

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Image Encryption/Decryption Tool")
    parser.add_argument("mode", choices=["encrypt", "decrypt"], help="Mode: encrypt or decrypt")
    parser.add_argument("image_path", help="Path to the input image")
    parser.add_argument("key", type=int, help="Encryption/Decryption key")
    parser.add_argument("output_path", help="Path to save the output image")

    args = parser.parse_args()

    if args.mode == "encrypt":
        encrypt_image(args.image_path, args.key, args.output_path)
    elif args.mode == "decrypt":
        decrypt_image(args.image_path, args.key, args.output_path)
